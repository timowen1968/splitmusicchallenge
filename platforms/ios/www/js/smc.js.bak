/**
 * Created by Tim on 9/3/16.
 *
 */
var TEST = true;
var DISABLESWIPE = true;
var SHOWAUDIO = true;
var totalCorrect = 0;
var duration = 2000;
var points = 0;
var overall_score = 0;
var beenWarned = "false";
var f;
// Used in named fields to prevent browser from auto-populating
var randomNumber = Math.ceil((Math.random() * 999999999));

var rankoptions = ["BAMBI", "BAMBI'S MOM", "SUPERMAN", "CHUCK NORRIS", "BATMAN", "JEDI"];
var rank;
var numberReady = [0,0,0,0,0,0,0,0,0,0]; // To check when all tracks are ready to play
var playFull = "false";
var storePlayingFull = -1;
var showedPlayAllMessage = "false";
var user = "";
var coinAudio;
var clickAudio;
var startDate = new Date();

var fontWide = " 15pt Lucida Console";
var fontSizeWide = "15";
var fontMedium = " 14pt Lucida Console";
var fontSizeMedium = "14";
var fontNarrow = " 9pt Lucida Console";
var fontSizeNarrow = "9";


var fontSize = fontSizeMedium;
var font = fontMedium;

var mp3Url = "http://www.oursort.co.za/splitmusicchallenge/mp3/";
var holdingPosition = 1;
var Load = [];
var Tracks = [];
var introRun = true;
var genre;
var decade;
var playInProgress = false;
var abortSong = false;
var playedUpTo = 0;var levelChanged = false;
var highScore;
var isMobileDevice;
var fieldWithFocus; // Needed to blur() when swiping else screen gets messed up

function updateStatusCallback(response){
    if(isMobileDevice){
        alert(response);
        message(12,response);
    }
}
$(document).ready(function(){
    $("#page").hide();

    if(!SHOWAUDIO){ $("audio").prop("controls", false) };
    
    isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
    if(!isMobileDevice){
        $("#fontTR").show();
    }
    // file:///var/mobile/Containers/Bundle/Application/7996818A-7667-44E1-8F59-DDA1133C9A7F/Split%20Music%20Challenge.app/www/index.html
    if(!navigator.onLine){
        noInternet();
        return false;
    }
    f = document.forms[0];

    setUp();

    $.get("http://www.oursort.co.za/splitmusicchallenge/smc.php?genre=" + f.genre.value + "&decade=" + f.decade.value + "&rand=" +
          Math.random(), function(data) {
        populatePage(data);  });


    if(!TEST)
    {
        $("#infoRow11").css("display", "none");
        $("#infoRow12").css("display", "none");
    }
    // facebook.login( function(success) { alert(success); }, function(error) { alert(error); } );
    coinAudio = document.getElementById("coinAudio");
    clickAudio = document.getElementById("clickAudio");
    clickAudio.currentTime = 0;
    clickAudio.muted = false;
    clickAudio.loop = false;

    $(window).on('resize orientationChange', function(event) { handleViewport(); });
    try {
        $.ajaxSetup({cache: true});
        $.getScript('http://connect.facebook.net/en_US/sdk.js', function () {
            // $.getScript('js/sdk.js', function(){
            FB.init({
                appId: '1725168737759736',
                url: 'http://www.oursort.co.za/splitmusicchallenge/index.html',
                version: 'v2.6' // or v2.0, v2.1, v2.2, v2.3
            });
            // console.log("init");
            $('#loginbutton,#feedbutton').removeAttr('disabled');
            // console.log("init 2 ");
            // FB.getLoginStatus(function(response){ alert("response " + response.status) });
            FB.getLoginStatus(function (response) {
                updateStatusCallback(response)
            });
            //api.facebook.com
            // api-read.facebook.com
            // https":"graph.facebook.com
            // http":"staticxx.facebook.com",
            // https:\/\/connect.facebook.net\/rsrc.php\
            // https:\/\/fbstatic-a.akamaihd.net\/rsrc.php
            // console.log("init 3");
        });
    }catch(e){
        alert(e);
    }

//                  alert(window.plugins);

});

// Viewport Specific stuff
function handleViewport(chosenFont){
    // alert($(window).width());
    var viewport = {
        width  : $(window).width(),
        height : $(window).height()
    };

    if(viewport.width > 1200) { // laptop
        if(typeof (chosenFont) != "undefined") {
            fontSize = chosenFont + "pt";
            font = fontWide.replace("15", chosenFont);
        }else {
            font = fontWide;
            fontSize = fontSizeWide + "pt";
        }
        $("#top").css("display", "none");
        $("#page").center();
        $("#header").css("font", font).css("font-size", fontSize);
        $("#optionsImg").prop("size", "20");
        $("select").css("font", font).css("font-size","10pt");
    }else if(viewport.width > 600){  // Ipad
        if(typeof (chosenFont) != "undefined") {
            fontSize = chosenFont + "pt";
            font = fontMedium.replace("14", chosenFont);
        }else {
            font = fontMedium;
            fontSize = fontSizeMedium + "pt";
        }
        $("#top").css("display", "block").css("width", viewport.width);
        $("#page").css("width","80%").css("background-size", "100%").center();
        $("#serverData").css("width", "100%");
        $("#header").css("font", font).css("font-size", fontSize);
        $("#optionsImg").prop("size", "18");
        $("select").css("font", font).css("font-size","8pt");
    }
    else{
        if(typeof (chosenFont) != "undefined") {
            fontSize = chosenFont + "pt";
            font = fontNarrow.replace("11", chosenFont);
        }else {
            font = fontNarrow;
            fontSize = fontSizeNarrow + "pt";
        }
        $("#top").css("display", "block").css("width", viewport.width);
        $("#page").css("width", viewport.width).css("height", viewport.height).css("top", "100px").center();
        $("#serverData").css("width", viewport.width);
//        $("#header").css("font", font).css("font-size", fontSize);
        $("#optionsImg").prop("size", "10");
        $("select").css("font", font).css("font-size", "7pt").css("color", "black");
        $("#splash").css("font-size", "15pt");
    }
    var fs = fontSize.replace("pt", "");
    $("#pause").center();

    message(11, font);
    message(12, fontSize);
    $("select").css("background", "#455e9c").css("border", "1px solid #455e9c");
    $("#splash").css("width", viewport.width).css("height", viewport.height).css("line-height", viewport.height + "px");
    $("#winsplash").css("width", viewport.width).css("height", viewport.height).css("line-height", viewport.height + "px");
    $("#wideViewport").css("font", font);
    $("#subHeader").css("font", font);
    $("input").css("font-size", fontSize);
    $(".info").css("font", font);
    $("select").css("font-size", (fs*1-1)+"pt");
    $("#subHeader").css("font-size", (fs*1+2)+"pt");
    $(".buttonTrack").css("font-size", (fontSize)+"pt").css("width", (chosenFont*2));
    $(".buttonTrack:disabled").css("font-size", (fontSize-2)+"pt").css("width", (chosenFont*2));
    return viewport;
}
function refreshTotalScore(){
    document.getElementById("pointsTD").innerHTML = "Total Score: " + overall_score + "<br>Level: " + rank;
}
function getTotalPoints() {
    found = getCookie("overall_score");
    if (found == "" || found == "NaN") {
        found = 0;
    }
    return getRank(found);
}
function getRank(found){
    duration = 2000;
    rank = rankoptions[0];
    if((found*1) < 10000){
        duration = 3000;
        rank = rankoptions[0];
    }else if((found*1) < 50000){
        duration = 2700;
        rank = rankoptions[1];
    }else if((found*1) < 100000){
        duration = 2400;
        rank = rankoptions[2];
    }else if((found*1) < 200000){
        rank = rankoptions[3];
    }else if((found*1) < 500000){
        rank = rankoptions[4];
    }else{
        duration = 1500;
        rank = rankoptions[5];
    }
    return found;
}
function audioReady(){
    var okay = 0;
    for(var i = 0; i<10; i++){
        okay+= numberReady[i];
    }
   return okay == 10;
//      return okay == 6;
}
function checkSong(e, ev){
    fieldWithFocus = e;
    ev = ev || window.event;
    var charCode = ev.keyCode || ev.which || ev.charCode;

    // Tab and shift must do nothing
    if(charCode == 9 || charCode == 16 || charCode == 13) return false;

    bits=e.name.split("_");
    var number = bits[1];

    // Get all the fields in the name of the song and artist
    var es = document.getElementById("row" + number).getElementsByTagName("input");

    // If a key was pressed but the field was empty and is still empty, presume backspace was pressed
    if(e.value == "" && (typeof(e.oldvalue) == "undefined" || e.oldvalue == "")){

        var foundNext = false;
        // If user presses backspace at beginning of row, check previous rows for field to focus on
        if(e == es[0]){
            for(var jj=number-1; jj>0; jj--){
                var ess = document.getElementById("row" + jj).getElementsByTagName("input");
                for(var i=ess.length-1; i>=0; i--){
                    if(ess[i].disabled == false) {
                        $(ess[i]).focus();
                        foundNext = true;
                        break;
                    }
                }
                if(foundNext) break;
            }
        }else {
            var keepLooping = "false";
            for (var i = es.length - 1; i > 0; i--) {
                if (e == es[i] || keepLooping == "true") {
                    if (es[i - 1].disabled == false) {
                        $(es[i - 1]).focus();
                        break;
                    }
                    keepLooping = "true";
                }
            }
        }
    }

    e.oldvalue = e.value;
    var correct = 0;

    var indexOfCurrent = 0;
    var total = 0;
    deductPoints(Tracks[number-1].score);
    for(var i=0; i<es.length; i++){
        total += Tracks[number-1].answersText[i].length;
        if(e == es[i]){
            indexOfCurrent = i;
        }
        if(es[i].value.toUpperCase() == Tracks[number-1].answersText[i].toUpperCase()) {
            correct += Tracks[number-1].answersText[i].length;
        }
    }
    // If correct answer automatically focus on next field
    if(es[indexOfCurrent].value.toUpperCase() == Tracks[number-1].answersText[indexOfCurrent].toUpperCase()){
        // Correct, so make it green and disable it
        if(indexOfCurrent < (es.length -1)){
            // Focus on the next empty field
            for(var jj=indexOfCurrent +1; jj<(es.length); jj++){
                // message(11, jj + " " + es[jj].disabled + " " + (es.length-1));
                if(!es[jj].disabled){
                    $(es[jj]).select();
                    $(es[jj]).focus();
                    // message(11, "Going to " + jj);
                    break;
                }
            }
            es[indexOfCurrent].value = Tracks[number-1].answersText[indexOfCurrent];
        }else if(number < 10){
            $(document.getElementsByName(randomNumber + "~answer_" + (number*1+1*1))[0]).focus();
        }
        es[indexOfCurrent].disabled = true;
    }
    var scoreForSong = Math.ceil(correct / total * 100);
    if (scoreForSong >= 100){
        scoreForSong = 100;
        for(var i=0; i<es.length; i++){
            es[i].disabled = true;
        }
        if (number != 10){
            $(document.getElementsByName(randomNumber + "~answer_" + (number*1+1*1))[0]).focus();
        }
        totalCorrect++;
        $("#ajaxResult").load("http://www.oursort.co.za/splitmusicchallenge/ajax.php", { option: "updatePopular", track: Tracks[number-1].trackId},
            function(){  }) ;
        addPoints(100);
        // message(12, "Total right " + totalCorrect);
    }
    Tracks[number-1].score = scoreForSong;
    addPoints(scoreForSong);

    // Fix the overall_score
    if (totalCorrect == 10){
        e.blur();
        addPoints(20000);
        $("#page").toggle('swirl',{spins:2},1000, function(){unswirl()});
        document.getElementById("surrender_all").style.display = "none";
        document.getElementById("getNext").style.display = "table";

    }
    showPoints();

}

function winsplashClicked(){
    $("#winsplash").toggle('swirl',{spins:2},1000, function() {
                           $("#page").toggle('swirl',{spins:4},1000 ) } );
}
function unswirl(){
    $("#winsplash").center().toggle('swirl',{spins:3},1000, function() { setTimeout(winsplashClicked, 1000) } );
}

function stopPlay(track){
    document.getElementById("row" + (next)).style.background = "";
    Tracks[track-1].stop();

}

function getCookie(name){
    var name = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
}
function addCookie(cname, cvalue){
    try {
        var d = new Date();
        d.setFullYear(2116);
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires;
    }catch (e){
        document.getElementById("debug").innerHTML = "";
    }
}

function deleteCookie(cname){
    try {
        var d = new Date();
        d.setFullYear(2000);
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=0; " + expires;
    }catch (e){
        document.getElementById("debug").innerHTML = "";
    }
}

// Once metadata has loaded, this checks the track is ready to play
function setSnippet(audioIndex, count){

    // alert(audioElement + " " + audioElement.src);
    var track = Load[audioIndex];
    var audioElement = track.getAudio();

    idTrack = audioIndex*1+1;
    message(idTrack, "Start loading " + count + " "  + audioElement.src);
    if(typeof(count) == "undefined"){
        count=0;
    }
    message(idTrack, "Have Load object");

    increasePercent(audioIndex, 30, 80);
    if(audioElement.readyState != 4 || track.canPlay < 1){
        message(idTrack, "readystate " + audioElement.readyState + " " + track.canPlay);
        setTimeout(setSnippet, 100, audioIndex, ++count);
        return;
    }
    if(track.canPlay == 1){
        message(idTrack, "canplay = " + track.canPlay);
        track.canPlay = 2;
        track.getAudio().currentTime = track.timeSnippet;
        setTimeout(setSnippet, 1000, audioIndex, count);
        return;
    }

    
    monitorLoad(audioIndex);
}


function slotIn(sequence){
    var track = Load[sequence];
    track.percent = 90;
    var idTrack = sequence * 1 + 1;
    message(idTrack, "");
    
    var hindex = idTrack - 1;
    e = track.getAudio();
    numberReady[sequence] = 1;

    $("#infoRow" + idTrack).hide();

    var fields = track.inputSong;

    if(fields[0].value.toUpperCase() == "BONUS") addPoints(1000);
    var ename = randomNumber + "~answer_" + idTrack;
    for(var j=0; j<fields.length; j++){
        fields[j].setAttribute("name", ename);
        $("#answerContainer"+idTrack).append(fields[j]);
    }
    message(idTrack, "");
    track.percent = 100;

    $("#answerContainer" + idTrack).html($("#answerContainer"+idTrack).html() + "by"); // byTag
    fields = track.inputArtist;
    for(var j=0; j<fields.length; j++){
        fields[j].setAttribute("name", ename);
        $("#answerContainer"+idTrack).append(fields[j]);
    }
    message(idTrack, "");
    $("#row" + idTrack).show();
    var eles = document.getElementsByName(ename);
    for(j=0; j<eles.length;j++){
        eles[j].onkeyup = function(event){ checkSong(this, event) };
    }
    $("#page").center();
    Tracks[hindex] = track;
    
}
// Monitors the buffer until the selected snippet is in one of the ranges
function monitorLoad(sequence, c){
    var calls = c;
    var track = Load[sequence];
    var idTrack = sequence*1+1;

    increasePercent(sequence, 40, 100);

    message(idTrack, "monitorload " + sequence);
    var e = track.getAudio();
    if(typeof(c) == "undefined"){
        calls=0;
    }else{
        e.pause();
    }
    
    // If this one is ready, skip it
    message(idTrack, "Ready to check buffer (call # " + calls + ")");
    // message(idTrack,50);
    if(numberReady[sequence] == 1){
        message(idTrack, "Finished");
        return;
    }
    // message(idTrack,50);
    var buffLen = e.buffered.length;
    message(idTrack, " Buffer exists length " + buffLen);
    // Wait for the buffer to have contents
    var count=0;
    if(e.buffered.length == 0){
        if(calls > 2000){
            alert("resetSrc");
            resetSrc(e);
            return;
        }
        message(idTrack, " Buffer is empty " + track.fileName + " " + calls);
        console.log(" Buffer is empty " + track.fileName + " " + calls);
        e.load();
        e.play();
        setTimeout(monitorLoad, 100, sequence, ++calls);
        return;
    }
    // alert("percent " + track.percent);
    // if(track.percent < 80) track.percent += 20;
    increasePercent(sequence, 40, 100);

    // If the snippet we need has been buffered, then release it
    var min = track.timeSnippet - 1; // 1 second back for safety
    if(min <0) min=0;
    var max = (track.timeSnippet + 3) * 1 // 3 seconds ahead to give room to play
//    max = e.duration;
    var buffercount=0;
    var amountLoaded =0;
    for (i = 0; i < buffLen; i++) {
        amountLoaded+=(e.buffered.end(i) - e.buffered.start(i));
        message(idTrack, amountLoaded + " of " + e.duration + " " + buffLen);
//        if (e.buffered.start(i) <= min && e.buffered.end(i) >= max) {
        if(amountLoaded == e.duration){
            slotIn(sequence);

            // All loaded? Start the game!
            if (audioReady() && introRun) {
                // Listen for swipe to replay
                document.addEventListener('touchstart', handleTouchStart, false);
                document.addEventListener('touchmove', handleTouchMove, false);
                var endDate = new Date();
                message(11, (endDate - startDate)/1000);
                nextSnippet(0);
            }

            return;
        }
    }
    calls++;
    setTimeout(monitorLoad, 50, sequence, calls);
    return;
// Sometimes buffer does not finish loading for some reason
//    if(e.buffered.end(0) > 30){
//        message(idTrack, "Changing snippet " + e.buffered.start(0) + " - " + e.buffered.end(0) + " ( " + track.timeSnippet
//                + " ) duration " + e.duration);
//        Load[sequence].timeSnippet = e.buffered.end(0) - 8;
//        monitorLoad(sequence);
//        return;
//    }
// Sometimes the audio tag NEVER fires a canplay, in which case we remove the tag and replace it.
    message(idTrack, "Not in buffer " + e.buffered.start(0) + " - " + e.buffered.end(0) + " ( " + track.timeSnippet
        + " ) duration " + e.duration + " buffer length " + e.buffered.length + " resetting");
    resetSrc(e);

}
function increasePercent(track, value, max){
    if (Load[track].percent <= max){
     Load[track].percent += value;
    }else{
        Load[track].percent = max;
    }
    message((track*1+1), "");
}

// plays all the tracks
function nextSnippet(next){

    $("button").prop("disabled", true);
    $("select").prop("disabled", true);
    $("#surrender_all").prop("disabled", false);
    playInProgress = true;
    // Stop at the end of the playlist
    if(next == 10) {
        Tracks[9].stop();
        $("#row10").css("background","");

        $("button").prop("disabled", false);
        $("select").prop("disabled", false);
        playInProgress = false;
        playedUpTo = 0;
        return;
    }
    // Stop previous track playing if this is not the first one
    if(next != 0){
        Tracks[next-1].stop();
        if(!abortSong || playFull === "true")
        document.getElementById("row" + (next)).style.background = "";

    }
    if(abortSong){
        $("button").prop("disabled", false);
        $("select").prop("disabled", false);
        playInProgress = false;
        abortSong = false;
        return;
    }
    playIfReady(next);
}

function playIfReady(next){
    if(typeof(Tracks[next]) == "undefined"){
        message(11, "Track " + next + " is not ready");
        setTimeout((playIfReady, 200, next));
        return;
    }
    Tracks[next].play();
    next++;
    playedUpTo = next;
    document.getElementById("row" + (next)).style.background = "#455e9c";

    setTimeout(nextSnippet, duration, next);

}
// Only happens in Safari
// Sometimes the audio tag NEVER fires a canplay, in which case we remove the tag and replace it.

function resetSrcOld(e){
    i=e.id.substr(8);
    // Remove the entry in the snippet list so it will refresh
    // Tracks[i-1].timesnippet = 0;
    e.pause();
    e.currentTime = 0;
    e.load();
    e.play();
    message(i, "resetSrc");
    alert("resetSrc");
}

function resetSrc(e){
    i=e.id.substr(8);
    // message(i, "resetSrc " + e.id);
    // message(11, "resetSrc " + e.id);
//    alert("Resetting " + e.readyState + " " + e.src);
   try{
       var save = e.src;
       e.pause();
       e.src = "";
       Load[i-1].timeSnippet = 0;
       // e.load();
       e.src = save;
       e.load();
   }catch(e){
       message(11, e.message);

   }
   return
}

function replayFull(){
    if(playInProgress) return false;
    nextSnippet(playedUpTo);
}

function confirmWarning(response, snippet){
//    alert(response + " " + snippet);
    if (!response) return false;
    addCookie("been_warned", "true");
    beenWarned = "true";
    replay(snippet);
}
function replay(snippet){
    // snippet=eid.substr(7);
    if(beenWarned == "false" && playFull == "false"){
        // a = confirm("Using these replay buttons will cost you points");
        messageUser("Using these replay buttons will cost you points", "That's ridiculous!", confirmWarning, snippet);
        return;
        // if (!a) return false;
        // addCookie("been_warned", "true");
    }
    if(playFull == "false") {
        document.getElementById("row" + (snippet)).style.background = "#455e9c";
        deductPoints(10);
        Tracks[snippet-1].play();
        setTimeout(function () {
            Tracks[snippet-1].stop();
            document.getElementById("row" + (snippet)).style.background = "";
        }, duration );
        var es = document.getElementsByName(randomNumber + "~answer_" + snippet)[0];
        $(es).focus();

    }else{
        // Game over and user has requested to play the full song

        // If a track is already playing, stop it
        if(storePlayingFull != -1){
            Tracks[storePlayingFull-1].stop();
        }
        if(storePlayingFull == snippet){
            storePlayingFull = -1;
            return;
        }
        Tracks[snippet-1].playFull();
        storePlayingFull = snippet;
    }

}

function showPoints(){
    $("#score").html("This Game: " + points);
}

function deductPoints(number){
    points -= number;
    showPoints();
}
function addPoints(number){
    points += number;
    showPoints();
}
function playAgain(){
    playClick();
    addCookie("overall_score", (overall_score * 1 + points));
    if(points > highScore){ addCookie("highscore", points) };
    var pause = 0;
    if(points > 0){
        coinAudio.currentTime = 0;
        coinAudio.muted = false;
        coinAudio.play();
//        pause = 9 /points;
        pause = points / 1000 / 9
        console.log("pause = " + points + " / 1000/9 = " + pause);
    }
    animateScore(pause);
    return false;
}

function playClick(){
    clickAudio.play();

}
function animateScore(pause) {
    if (points > 0) {
        overall_score = overall_score * 1 + 1;
        points--;
        refreshTotalScore();
        showPoints();
        setTimeout(animateScore, pause, pause);
    }else{
        $("#page").hide();
        $("#splash").show();
        nextGame();
    }
}

function nextGame(){
    $("#play").hide();
    $("#splash").center().show();
    window.location.href = "index.html?rand=" + Math.random();
}

function trapError(e, obj){
    alert("trap error " + obj.currentSrc + " " + e.code + " " +obj.error.code);
    $("#errorResult").load("http://www.oursort.co.za/splitmusicchallenge/ajax.php", { option: "logError", track: obj.id.substr(4), reason: 5,
            info: "file does not exist", timesnippet: 0, detail: "None"},
        function(){ cleanupErrorDiv() }) ;

}
// In test mode, presents the next 10 tracks
function getNextSet(){
    $("#splash").html("Tuning Our Instruments").show();
    $("#play").hide();
    f.start.value = f.start.value * 1 + ( 10 * 1);
    window.location.href="index.html?test=true&start=" + f.start.value;
    return true;
}

function surrenderAll(e){
    // playClick();
    for(var i=1; i<=10;i++){
        fields = document.getElementsByName(randomNumber + "~answer_"+i)

//        $("input:text").prop("disabled", "true");
        for(var j=0;j<fields.length;j++){
            fields[j].value = Tracks[i-1].answersText[j];
            fields[j].disabled = true;
        }
    }
    e.style.display = "none";
    document.getElementById("getNext").style.display = "table";
    // $("#loser").center().fadeToggle(1000).fadeToggle(500);
    duration = 120000;
    playFull = "true";
    abortSong = true;
    showedPlayAllMessage = "true";

}
function submitError(){
    try{
        bits = f.songError.value.split("_");

        if(bits.length == 1){
            bits[1] = "-1";
        }

        var error = "false";
        f.songError.style.background = "";
        f.reasonError.style.background = "";

        if(f.reasonError.value < 0){
            error = "true";
            f.reasonError.style.background = "pink";
        }

        document.getElementById("songErrorTr").style.display = "none";
        var timeslice = -1;
        if(f.reasonError.value <= 2){

            timeslice = Tracks[bits[0]-1].timeSnippet;
        }
        allDetails = "";
        for (i=0; i<10; i++){
            allDetails += " " + Tracks[i].id + ":" + Tracks[i].timeSnippet;
        }
        if(error == "true") return false;
        $("#errorResult").load("http://www.oursort.co.za/splitmusicchallenge/ajax.php", { option: "logError", track: bits[1], reason: f.reasonError.value,
                info: f.errorReason.value, timesnippet: timeslice, detail: allDetails},
            function(){ cleanupErrorDiv() }) ;
    }
    catch (e){
        alert ("Submiterrpr " +e);
        return false;
    }
}


function changeError(i){
    if (i == 1 && f.reasonError.value == -1) {
        document.getElementById("songErrorTr").style.display = "none";
        return;
    }
    if (i == 2 && f.songError.value == -1) return;
    if (i == 1){
        if(f.reasonError.value >=0 && f.reasonError.value < 3) {
            document.getElementById("songErrorTr").style.display = "table-row";
        }else{
            document.getElementById("songErrorTr").style.display = "none";
        }
        if(f.reasonError.value == 4){ // Something else
            $(f.errorReason).focus();
        }
        return;
    }
    if (i == 2 && f.songError.value == 0) { // Not song related
    }

}
function defaultCallBack(){

}
function useLifeline(e){
    if(e.value == 0) return true;
    if(e.value == 99){
        // alert("You've already used up this life line");
        messageUser("You've already used up this life line", "", defaultCallBack);
        e.value = 0;
        return;
    }

    // replay full set of snippets - free
    if(e.value == 1){
        replayFull();

        // Play different snippet
    }else if (e.value == 3){
        deductPoints(500);

        loadSnippets();
        e[e.selectedIndex].value = "99";
        nextSnippet(0);

        // Play longer snippet
    }else if (e.value == 2){
        duration = duration * 1 + 500;
        deductPoints(Math.ceil(duration / 25));
        if(duration > 2000)
            e[e.selectedIndex].value = "99";
        nextSnippet(0);
    }
    e.selectedIndex = 0;
    return;
}

function loadSnippets(){
    for(var loopy=0; loopy<10;loopy++) {
        var e = Tracks[loopy].audio;
        random = Math.random();
        var snippy = Math.floor(random * (e.duration - 6)) + 2; // Need to make sure we have enough seconds to play
        Tracks[loopy].timeSnippet = snippy;
    }

}
/**
 * Created by Tim on 3/13/16.
 */
jQuery.fn.center = function () {
    this.css("position","absolute");
    this.css("top", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) +
            $(window).scrollTop()) + "px");
    this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) +
            $(window).scrollLeft()) + "px");
    return this;
}
jQuery.fn.visible = function() {
    return this.css('visibility', 'visible');
};

jQuery.fn.invisible = function() {
    return this.css('visibility', 'hidden');
};

jQuery.fn.visibilityToggle = function() {
    return this.css('visibility', function(i, visibility) {
        return (visibility == 'visible') ? 'hidden' : 'visible';
    });
};


function getSongSrc(snippetNumber, source){
    $("#loadSnip"+snippetNumber).prop("src", source);
    if(isMobileDevice){
//        document.getElementById("loadSnip" + snippetNumber).load();
        document.getElementById("loadSnip" + snippetNumber).play();
    }else{
        document.getElementById("loadSnip" + snippetNumber).muted = true;
        document.getElementById("loadSnip" + snippetNumber).play();
    }
//    $("#loadSnip"+snippetNumber).play();
}
function fetchSource(url, idx){
    var i = idx;
    prefetch_file(url, function(url) { fetched(url, idx) },
                  function(pc, idx) { progress(pc, i) }, function(e,idx) { error(e,idx) });
}

function populatePage(data){
    if(data.substr(0,5) == "ERROR"){
        alert(data.substr(7));
        deleteCookie("decade");
        deleteCookie("genre")
        playAgain();
        // window.location.href = "index.html?rand=" + Math.random();
        return;
    };
    message(11, (new Date() - startDate)/1000);


    var songErrorOptions = "<option value='-1'>Select</option>";
    var selectedRowsValue = "";
    var line = data.split("~~~");
    // message(12, line[10]);

    for(var i=0; i<10;i++){
        var music = new Music();
        music.sequence = i;
        var snippetNumber = (i*1+1);
        var bits = line[i].split("~!~");
        
        music.trackId = bits[0];
        music.fileName = bits[1];
        music.id = "loadSnip" + snippetNumber;

        // Load the bolb as the source
        fetchSource(mp3Url +music.fileName, snippetNumber)
        if(bits[2].toUpperCase().indexOf("BONUS") >= 0){
            music.audio = document.getElementById("coinAudio");
            music.timeSnippet = 0;
        }else{
            music.audio = document.getElementById(music.id);
        }
        music.songName = bits[2];
        music.artist = bits[3];
        var random = Math.random();
        var snippy = Math.floor(random * 55); // Need to make sure we have enough seconds to play
        music.timeSnippet = snippy;
        songErrorOptions += "<option value='" + snippetNumber + "_" + music.trackId + "'>" + snippetNumber + "</option>";

        Load[i] = music;
        increasePercent(i,5,100);
        message(snippetNumber, "loaded Load");
        populateLoadMusicList(i, music);
        layoutAnswerGrid(i, music);
        selectedRowsValue +=  music.trackId +  " ";
        
    }
//    for(var i=0; i<10;i++) {
//        var music = Load[i];
//        populateLoadMusicList(i, music);
//        layoutAnswerGrid(i, music);
//        selectedRowsValue +=  music.trackId +  " ";
//    }
    // selectedRowsValue += "0)";
    // document.forms[0].selectedRows.value = selectedRowsValue;
    // $("#ajaxResult").load("http://www.oursort.co.za/splitmusicchallenge/ajax.php", { option: "updateSelected", tracks: selectedRowsValue},
    //     function(){  }) ;

    $("#songError").html(songErrorOptions);
    $("#splash").hide();
    $("#page").show();

}

function addAudioHTML(idx, src){
    var e = "<audio onCanPlayThrough='setCanPlay(this)' id='loadSnip" + idx + "' preload=true muted=true autoplay=true " +
    "src='" + src + "'></audio>"
    document.getElementById("audioElements").innerHTML += e;
    if(isMobileDevice){
        //        document.getElementById("loadSnip" + snippetNumber).load();
        document.getElementById("loadSnip" + idx).play();
    }else{
        document.getElementById("loadSnip" + idx).muted = true;
        document.getElementById("loadSnip" + idx).play();
    }
    
}

function setCanPlay(e){
    var i=e.id.substr(8);
    console.log(i + " can play");
    var idx = i-1;
    increasePercent(idx,10,70);
    if(typeof(Load[idx]) == "undefined"){
        console.log(i + " can play timeout");
        setTimeout(setCanPlay, 1000, e);
        return;
    }
    if(Load[idx].canPlay >= 1){
        return;
    }
    Load[idx].canPlay = 1;
    setTimeout(setSnippet, 500, idx, 0);
}
function layoutAnswerGrid(i, track){
    var pad = 2;
    var bits = track.songName.split(" ");
    var showValue = false;
    var value = "";
    var index = (i*1+1);
    increasePercent(i,5,100);
    message(index, "answer grid");
    
    if(bits[0] == "Bonus") {
        showValue = true;
//        addPoints(1000);
    };
    for(var ii=0; ii<bits.length;ii++) {
        var newInput = document.createElement("input");
        newInput.setAttribute("type", "text");
        newInput.setAttribute("class", "track");
        $(newInput).css("font", font);
        $(newInput).css("width", getWidthOfText(bits[ii]));
        if(showValue) {
            newInput.setAttribute("value", bits[ii]);
            newInput.setAttribute("disabled", "true");
        }

        newInput.setAttribute("name", randomNumber + "_answer_" + index);
        newInput.onkeyup = function(event){ checkSong(this, event) };
        track.inputSong[ii] = newInput;
    }
    
    bits = track.artist.split(" ");
    for(var ii=0; ii<bits.length;ii++) {
        var newInput = document.createElement("input");
        newInput.setAttribute("type", "text");
        newInput.setAttribute("class", "track");
        // newInput.setAttribute("size", (bits[ii].length*1+pad) + "em");
        $(newInput).css("font", font);
        $(newInput).css("width", getWidthOfText(bits[ii]));
        if(showValue) {
            newInput.setAttribute("value", bits[ii]);
            newInput.setAttribute("disabled", "true");
        }
        if(bits[ii].trim().toUpperCase() == "AND" || bits[ii].trim() == "&"){
            newInput.setAttribute("value", "&");
            newInput.setAttribute("disabled", "true");
        }
        newInput.setAttribute("name", randomNumber + "_answer_" + index);
        newInput.onkeyup = function(event){ checkSong(this, event) };
        track.inputArtist[ii] = newInput;
    }
    return;
}
function populateLoadMusicList(i, music){
    bits = (music.songName + " " + music.artist).split(" ");
    for(var ii=0; ii<bits.length;ii++){
        music.answersText[ii] = bits[ii].trim();
    }
}
function tilt(x){
//    alert(x + " " + y);
}

function noInternet(){
    handleViewport();
    $("#splash").hide();

    $("#connection").center();
    $("#connection").show();
    document.addEventListener('touchstart', handleTouchStart, false);
    document.addEventListener('touchmove', handleTouchMove, false);

}
function setUp(){
    var viewport = handleViewport();

    $("#splash").center();
    $("#splash").css("position", "absolute").css("top", "20px").css("bottom", "20px");
    if(!TEST) $(".buttonInfo").css("visibility", "hidden");
    $("#splash").show();
    // document.getElementById("splash").style.display = "block";
    getGenre();
    getDecade();
    getHighScore();

    beenWarned = getCookie("been_warned");
    if (beenWarned == ""){
        beenWarned = "false";
    }

    overall_score = getTotalPoints();

    refreshTotalScore();
    showPoints();

    runIntro();

//    $("#reportMistake").click(function(){
//        $("#reportProblem").center().fadeIn(1000);
//        $("#errorResult").html("");
//        $("#songError").focus();
//        return false;
//    });
//    $("#showRules").click(function(){
//        $("#rules").center().fadeIn(1000);
//        $("#about").fadeOut(1000);
//        return false;
//    });
}

function Music() {
    this.sequence = "";
    this.timeSnippet = 0;
    this.answersText = [];
    this.inputSong = [];
    this.inputArtist = [];
    this.id = "";
    this.fileName = "";
    this.songName = "";
    this.artist = "";
    this.score = 0;
    this.audio = "";
    this.percent = 0;
    this.history = "";
    this.audio;
    this.canPlay = 0;
    this.addHistory = function(h){
        this.history += "\n" + h.replace(/'"'/,"").replace(/"'"/,"");
    }

    this.getAudio = function() {
        return document.getElementById(this.id);
    }
    this.play = function(){
//        this.audio.currentTime = 0;
//        this.audio.currentTime = this.timeSnippet;
//        var obj = this.getAudio();
        this.audio.muted = false;
        this.audio.play();
        console.log(this.id + " Seeking " + this.audio.seeking);
        message(11, "<b> Curr " + this.audio.currentTime +
                " D " + this.audio.duration + "</b>");
        message(12, "<b> Seek " + this.audio.seeking + " paus " + this.audio.paused + " mute " + this.audio.muted + "</b>");
        //        if(this.sequence == 0){
//            this.showAudioDetails(obj);
//        }
    }
    this.stop = function(){
//        var obj = this.getAudio();
        this.audio.pause();
        this.audio.currentTime = this.timeSnippet;
    }
    this.playFull = function(){
        var obj = this.getAudio();
        obj = document.getElementById(this.id);
        obj.currentTime = 0;
        obj.play();
    }
    this.showAudioDetails = function(obj) {
        console.log("currentSrc " + obj.currentSrc);
        console.log("ended " + obj.ended);
        console.log("error " + obj.error);
        console.log("muted " + obj.muted);
        console.log("networkState " + obj.networkState);
        console.log("paused " + obj.paused);
        console.log("buffered " + obj.buffered.start(0) + " - " + obj.buffered.end(0));
        console.log("played " + obj.played.length);
        console.log("readyState " + obj.readyState);
        console.log("seeking " + obj.seeking);
        console.log("currentTime " + obj.currentTime);
        console.log("duration " + obj.duration);
    }
}
function showOptions(){
    DISABLESWIPE = !DISABLESWIPE;
    abortSong = !abortSong;
    $( "#options" ).toggle("slide", {direction:"right"}, "fast")
}
function showAbout(){
    $( "#options" ).toggle("slide", {direction:"right"}, "fast")
    $( "#about" ).toggle("slide", {direction:"left"}, "fast")
}
function showReport(){
    $( "#options" ).toggle("slide", {direction:"right"}, "fast")
    $( "#reportProblem" ).toggle("slide", {direction:"left"}, "fast")
}

function cleanupErrorDiv(){
    $( "#options" ).toggle("slide", {direction:"right"}, "slow")
    $( "#reportProblem" ).toggle("slide", {direction:"left"}, "slow")
    f.songError.value = "-1";
    f.reasonError.value = "-1";
    f.errorReason.value = "";
}

function cleanupAboutDiv(){
    $( "#options" ).toggle("slide", {direction:"right"}, "slow")
    $( "#about" ).toggle("slide", {direction:"left"}, "slow")
}

function runIntro(){
    if(introRun) return true;
    $(".runintro1").show();
    var classes = document.getElementsByClassName("trackTD");
    flicker(classes,0);

}
function flicker(c,i){
    return;
    if(i > 0){
        $(c-1).css("background-image", "url('img/dimgreenplay.gif')")
    }
    if(c == 9) return;
    $(c).css("background-image", "url('img/lightgreenplay.gif')")
    setTimeout(flicker, 1000, (c, i*1+1));

}

function chooseGenre(ele){
    if(ele.value == "0"){
        deleteCookie("genre");
    }else {
        addCookie("genre", ele.value);
    }
    playAgain();
    // window.location.href = "index.html?rand=" + Math.random();
    return;
}

function getHighScore(){
    highScore = getCookie("highscore");
    if (highScore == ""){
        highScore = 0;
    }
}

function getGenre(){
    var genre = getCookie("genre");
    if (genre == ""){
        genre = 0;
    }
    f.genre.value = genre;
}

function chooseDecade(ele){
    if(ele.value == "0"){
        deleteCookie("decade");
    }else {
        addCookie("decade", ele.value);
    }
    playAgain();
    // window.location.href = "index.html?rand=" + Math.random();
    return;
}

function getDecade(){
    var decade = getCookie("decade");
    if (decade == ""){
        decade = 0;
    }
    f.decade.value = decade;
}

function getWidthOfText(text) {
    // alert(text)
    var tmp = document.createElement("span");
    tmp.className = "input-element tmp-element";
    $(tmp).css("font", font);
    $(tmp).css("visibility", "hidden");
    tmp.innerHTML = text;
    document.body.appendChild(tmp);
    var theWidth = Math.ceil(tmp.getBoundingClientRect().width);
    document.body.removeChild(tmp);
    return theWidth + "px";
}

var xDown = null;
var yDown = null;

function handleTouchStart(evt) {
    xDown = evt.touches[0].clientX;
    yDown = evt.touches[0].clientY;
};

function handleTouchMove(evt) {
    if(DISABLESWIPE)
        return;
    if ( ! xDown || ! yDown ) {
        return;
    }

    var xUp = evt.touches[0].clientX;
    var yUp = evt.touches[0].clientY;

    var xDiff = xDown - xUp;
    var yDiff = yDown - yUp;

    if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/
        if ( xDiff > 4 ) {
            biggerFont();
        } else if ( xDiff < -4) {
            smallerFont();
        }
    } else {
        if ( yDiff > 4 ) {
            swipePause();
        } else if ( yDiff < -4 ){
            swipePlay();
        }
    }
    /* reset values */
    xDown = null;
    yDown = null;
};

function swipePause(){
    console.log("fieldWithFocus " + fieldWithFocus)
    if(typeof(fieldWithFocus) != "undefined") fieldWithFocus.blur();
    if(!playInProgress || playedUpTo == 10) return;
    abortSong = true;
//    var focusElements = document.getElementById("row" + playedUpTo).getElementsByTagName("input");
//    // Focus on first field of tracl being played
//    focusElements[0].focus();
    $("#pause").css("opacity", 0.0);
    $("#pause").css("display", "block");
    
    evolve(document.getElementById("pause"), 0);
}
function swipePlay(){

    if(typeof(fieldWithFocus) != "undefined"){
        fieldWithFocus.blur();
    }
    if(fieldWithFocus){
        fieldWithFocus.blur();
    }
    // If no internet connection, swipe reloads the game
    if(typeof (Tracks[0]) == "undefined"){
        // console.log("replay");
        playAgain();
        return false;
    }

    if(playInProgress || showedPlayAllMessage == "true") return;
    message(12, document.getElementById("pause").style.display);
    if(document.getElementById("pause").style.display != "none") {
        // message(11, document.getElementById("pause").style.display);
        disolve(document.getElementById("pause"), 1);
    }
    replayFull();
}

function disolve(ele, opac){
    // ele.style.display = "inline";
    $(ele).css("zIndex", 0);

//    $("#page").css("opacity", 1);
    if(opac > 0){
        opac -= 0.20;
        ele.style.opacity = opac;
        $("#page").css("opacity", (1-opac));
        setTimeout(disolve, 100, ele, opac);
        return;
    }
    $(ele).css("display", "none");
}
function evolve(ele, opac){
    if(opac < 1){
        opac += 0.10;
        ele.style.opacity = opac;
        $("#page").css("opacity", (1-opac));
        setTimeout(evolve, 100, ele, opac);
        return;
    }
//    $(ele).css("zIndex", -1);
//    $(ele).css("display", "none");
    //    $("#page").css("opacity", 0.7);
     setTimeout(disolve,1000,ele,1);
}
function biggerFont(){
    if(fontSize == "15pt") return;
    fontSize = fontSize.replace("pt", "")*1+1;
    adjustInputSizes();
    handleViewport(fontSize);
    $("#page").center();
}
function smallerFont(){
    if(fontSize == "6pt") return;
    fontSize = fontSize.replace("pt", "")*1-1;
    handleViewport(fontSize);
    $("#page").center();
}

function shareToTwitter(){
    var storeRank = rank;
    getRank(points * 1 + overall_score * 1);
    var message = "Can you recognise a song in just a couple of seconds? Play the Split Music Challenge and find out.";

    if (rank != storeRank) {
        message = "I've reached the level of " + rank + " on the Split Music Challenge!"
    } else if (points > highScore) {
        message = "I'v reached a personal new best on the Split Music Challenge! " + points + " points."
    }

    alert(message);
    open("https://twitter.com/home?status=" + message +
        "%26url=http%3A//www.oursort.co.za/splitmusicchallenge/index.html");

}
function shareToFaceBook(){
    try {
       FB.ui({
           method: 'feed',
           name: title,
//           link: 'http://www.oursort.co.za/splitmusicchallenge/index.html',
             link: 'za.co.oursort.splitmusicchallenge',
           picture: 'http://www.oursort.co.za/splitmusicchallenge/img/musicimage2.jpg',
           caption: 'Split Music Challenge',
           description: "message"
       });
        return;
        open("https://www.facebook.com/sharer/sharer.php?u=http://www.oursort.co.za/splitmusicchallenge/index.html");
              // https://www.facebook.com/sharer/sharer.php?u=http://www.oursort.co.za/splitmusicchallenge/index.html
        return;
        FB.login(function(response){ alert("response: " + response.status)});
        return;
        var storeRank = rank;
        getRank(points * 1 + overall_score * 1);
        var message = "Can you recognise a song in just a couple of seconds? Play the Split Music Challenge and find out.";
        var title = 'Split Music Challenge.'

        if (rank != storeRank) {
            message = "Congratulations, you've reached the level of " + rank + " on the Split Music Challenge!"
            title = "Promoted to level: " + rank;
        } else if (points > highScore) {
            message = "Congratulations! Youv'e reached a personal new best on the Split Music Challenge! " + points + " points."
            title = "Personal new best :" + points;
        }


//        window.plugins.socialsharing.share('Message only')
                                         
        addPoints(500);
    }catch (e){
        alert("Error " + e);
    }
}

function adjustInputSizes(){
    e = document.getElementsByTagName("input");
    var row = 0;
    var saveRow = 0;
    var field = -1;
    for(var i=0; i<e.length; i++){
        if(e[i].name.indexOf("answer") <= 0) continue;
        row = (e[i].name.split("_")[1])-1;
        if(row != saveRow) field = -1;
        field++;
        saveRow = row;
        // console.log("row = " + row + " name = " + e[i].name + " field = " + field + " " + Tracks[row].answersText[field]);
        e[i].style.font = font;
        $(e[i]).css("width", getWidthOfText(Tracks[row].answersText[field]));

    }
}

                                         

function messageUser(message, cancel, callBack, parm){
    $("#alertsMessage").html(message);
    var cancelButton = "";
    if(cancel != ""){
        cancelButton = "<button class='alerts' type='button' onClick='returnInput(false, " + callBack +  ", " + parm + ")'>" + cancel + "</button>";
    }
    var okayButton = "<button class='alerts' type='button' onClick='returnInput(true, " + callBack + ", " + parm + ")'>Okay</button>";
    $("#alertsButtons").html(cancelButton + "&nbsp;&nbsp;" + okayButton);
    $("#alerts").center();
    //    $(".alerts, #alerts").show();
    $("#alerts").show();
    
}
function returnInput(response, callBack, parm){
    $("#alerts").hide();
    callBack(response, parm);

}


function message(r, mess){
    try {

        var fullmess = "";
        
        var now = new Date();
        var lapsed = ((now - startDate)/1000);
        lapsed = Math.floor(lapsed);
        var loading = "Loading...";
        if (TEST || r > 10) {
//          mess = (""+mess).replace(/"\'"/g, "").replace(/'\"'/g, "");
          // var fullmess = mess.replace(/'/g, "").replace(/"/g, "");
          if (r <= 10) {
//              Load[r - 1].addHistory(mess);
//              fullmess = Load[r - 1].history;
              // mess = fullmess;
          }
          // $("#info" + r).html(r + "<input type='text' class='info' size=1 value='" + r + "' style='visibility:hidden;font:" + font + "'/> " +
          //     "<div onclass='progress'>" + mess + "</div>");
            if(lapsed > 20 && r<=10){
                mess = "<a target=_new href='mp3/" + Load[r-1].fileName + "'>"+Load[r-1].fileName+"</a>";
            }
          $("#info" + r).html(r + "<input type='text' class='info' size=1 value='" + r + "' style='visibility:hidden;font:" + font + "'/> " +
                              "<div class='progress'>" + mess + "</div>");
        }else{
          Load[r - 1].addHistory(mess);
          // console.log(mess);
          fullmess = Load[r - 1].history;
          
        var perc = Load[r - 1].percent;
        if(lapsed > 1){
            if(lapsed > 10 && lapsed % 2 == 0){
                loading = "Slow connection " + lapsed
            }else {
                loading = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Loading...&nbsp;&nbsp;&nbsp;"
            }
        }
            if(lapsed > 30){
                loading = "<a target=_new href='mp3/" + Load[r-1].fileName + "'>"+Load[r-1].fileName+"</a>";
            }
                // loading = lapsed;
          var inside = "<table style='width:100%'><tr><td onclick='alert(\"" + fullmess + "\")' style='width:" + perc +
          "%;background:indianred;text-align:center; display:block; overflow:hidden;white-space:nowrap'>" + loading +
          // "%;background:#455e9c;text-align:center'>" +
          "</td><td>&nbsp</td></tr></table>";
          $("#info" + r).html(inside);
          // if (perc < 90) {
          //     Load[r - 1].percent = perc * 1 + 10;
          // }
          // alert("");
        }
    }catch(e){
          alert(e  + " r = " + r + " mess = " + mess);
          }
          
}

function prefetch_file(url,
                       fetched_callback,
                       progress_callback,
                       error_callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "blob";
    
    xhr.addEventListener("load", function () {
                         if (xhr.status === 200) {
                         var URL = window.URL || window.webkitURL;
                         var blob_url = URL.createObjectURL(xhr.response);
                         fetched_callback(blob_url);
                         } else {
                         error_callback();
                         }
                         }, false);
    
    var prev_pc = 0;
    xhr.addEventListener("progress", function(event) {
                         if (event.lengthComputable) {
                         var pc = Math.round((event.loaded / event.total) * 100);
                         if (pc != prev_pc) {
                         prev_pc = pc;
                         progress_callback(pc);
                         }
                         }
                         });
    xhr.send();
}
function fetched(url, idx){
    var e = document.getElementById("loadSnip" + idx)
    e.src = url;
    e.load();
    console.log(idx + " fetched " + url);
//    e.play();
//    e.currentTime = Load[idx-1].timeSnippet;
    $(e).bind("canplaythrough", function(){setCanPlay(this) });
//    setCanPlay(e);
}
function error(e,idx){
    alert("error " + e);
}
function progress(pc, idx){
    console.log(idx + " = " + pc);
}


